{"dependencies":[{"name":"/Users/willis/code/delete-branch-after-merge/package.json","includedInParent":true,"mtime":1526260772238},{"name":"/Users/willis/code/delete-branch-after-merge/node_modules/callbag-from-promise/package.json","includedInParent":true,"mtime":1517321430000}],"generated":{"js":"const e=e=>(t,n)=>{if(0!==t)return;let o=!1;e.then(e=>{o||(n(1,e),n(2))},e=>{o||n(2,e)}),n(0,e=>{2===e&&(o=!0)})};module.exports=e;","map":{"mappings":[{"source":"node_modules/callbag-from-promise/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/callbag-from-promise/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/callbag-from-promise/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/callbag-from-promise/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/callbag-from-promise/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/callbag-from-promise/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/callbag-from-promise/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/callbag-from-promise/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/callbag-from-promise/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/callbag-from-promise/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/callbag-from-promise/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/callbag-from-promise/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/callbag-from-promise/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/callbag-from-promise/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/callbag-from-promise/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/callbag-from-promise/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/callbag-from-promise/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/callbag-from-promise/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/callbag-from-promise/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/callbag-from-promise/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}}],"sources":{"node_modules/callbag-from-promise/index.js":"const fromPromise = promise => (start, sink) => {\n  if (start !== 0) return;\n  let ended = false;\n  const onfulfilled = val => {\n    if (ended) return;\n    sink(1, val);\n    sink(2);\n  };\n  const onrejected = err => {\n    if (ended) return;\n    sink(2, err);\n  };\n  promise.then(onfulfilled, onrejected);\n  sink(0, t => {\n    if (t === 2) ended = true;\n  });\n};\n\nmodule.exports = fromPromise;\n"},"lineCount":20}},"hash":"a85ce6e41e6bfee4f501ad4f94f41587","cacheData":{"env":{}}}