{"dependencies":[{"name":"/Users/willis/code/delete-branch-after-merge/package.json","includedInParent":true,"mtime":1526260772238},{"name":"/Users/willis/code/delete-branch-after-merge/node_modules/callbag-scan/package.json","includedInParent":true,"mtime":1518689006000}],"generated":{"js":"function e(e,t){let n=2===arguments.length;return r=>(l,u)=>{if(0!==l)return;let o=t;r(0,(t,r)=>{1===t?(o=n?e(o,r):(n=!0,r),u(1,o)):u(t,r)})}}module.exports=e;","map":{"mappings":[{"source":"node_modules/callbag-scan/readme.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/callbag-scan/readme.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/callbag-scan/readme.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/callbag-scan/readme.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/callbag-scan/readme.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/callbag-scan/readme.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/callbag-scan/readme.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/callbag-scan/readme.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/callbag-scan/readme.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/callbag-scan/readme.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/callbag-scan/readme.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/callbag-scan/readme.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/callbag-scan/readme.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/callbag-scan/readme.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/callbag-scan/readme.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/callbag-scan/readme.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/callbag-scan/readme.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/callbag-scan/readme.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/callbag-scan/readme.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/callbag-scan/readme.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/callbag-scan/readme.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/callbag-scan/readme.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/callbag-scan/readme.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/callbag-scan/readme.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/callbag-scan/readme.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/callbag-scan/readme.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/callbag-scan/readme.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/callbag-scan/readme.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/callbag-scan/readme.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/callbag-scan/readme.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/callbag-scan/readme.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/callbag-scan/readme.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/callbag-scan/readme.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/callbag-scan/readme.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/callbag-scan/readme.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/callbag-scan/readme.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/callbag-scan/readme.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/callbag-scan/readme.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/callbag-scan/readme.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/callbag-scan/readme.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/callbag-scan/readme.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/callbag-scan/readme.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/callbag-scan/readme.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}}],"sources":{"node_modules/callbag-scan/readme.js":"/**\n * callbag-scan\n * ------------\n *\n * Callbag operator that combines consecutive values from the same source.\n * It's essentially like array `.reduce`, but delivers a new accumulated value\n * for each value from the callbag source. Works on either pullable or\n * listenable sources.\n *\n * `npm install callbag-scan`\n *\n * Example:\n *\n *     const fromIter = require('callbag-from-iter');\n *     const iterate = require('callbag-iterate');\n *     const scan = require('callbag-scan');\n *\n *     const iterSource = fromIter([1,2,3,4,5]);\n *     const scanned = scan((prev, x) => prev + x, 0)(iterSource);\n *\n *     scanned(0, iterate(x => console.log(x))); // 1\n *                                               // 3\n *                                               // 6\n *                                               // 10\n *                                               // 15\n */\n\nfunction scan(reducer, seed) {\n  let hasAcc = arguments.length === 2;\n  return source => (start, sink) => {\n    if (start !== 0) return;\n    let acc = seed;\n    source(0, (t, d) => {\n      if (t === 1) {\n        acc = hasAcc ? reducer(acc, d) : ((hasAcc = true), d);\n        sink(1, acc);\n      } else sink(t, d);\n    });\n  };\n}\n\nmodule.exports = scan;\n"},"lineCount":43}},"hash":"8e208292c3f352b577dfa4343e6f7844","cacheData":{"env":{}}}