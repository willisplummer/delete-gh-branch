{"dependencies":[{"name":"/Users/willis/code/delete-branch-after-merge/package.json","includedInParent":true,"mtime":1526260772238},{"name":"/Users/willis/code/delete-branch-after-merge/node_modules/callbag-merge/package.json","includedInParent":true,"mtime":1522843381000}],"generated":{"js":"function t(...t){return(e,r)=>{if(0!==e)return;const n=t.length,o=new Array(n);let f=0,l=0;const i=t=>{if(0!==t)for(let e=0;e<n;e++)o[e]&&o[e](t)};for(let e=0;e<n;e++)t[e](0,(t,u)=>{0===t?(o[e]=u,1==++f&&r(0,i)):2===t?(o[e]=void 0,++l===n&&r(2)):r(t,u)})}}module.exports=t;","map":{"mappings":[{"source":"node_modules/callbag-merge/readme.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/callbag-merge/readme.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/callbag-merge/readme.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/callbag-merge/readme.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/callbag-merge/readme.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/callbag-merge/readme.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/callbag-merge/readme.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/callbag-merge/readme.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/callbag-merge/readme.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/callbag-merge/readme.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/callbag-merge/readme.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/callbag-merge/readme.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/callbag-merge/readme.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/callbag-merge/readme.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/callbag-merge/readme.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/callbag-merge/readme.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/callbag-merge/readme.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/callbag-merge/readme.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/callbag-merge/readme.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/callbag-merge/readme.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/callbag-merge/readme.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/callbag-merge/readme.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/callbag-merge/readme.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/callbag-merge/readme.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/callbag-merge/readme.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/callbag-merge/readme.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/callbag-merge/readme.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/callbag-merge/readme.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/callbag-merge/readme.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/callbag-merge/readme.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/callbag-merge/readme.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/callbag-merge/readme.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/callbag-merge/readme.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/callbag-merge/readme.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/callbag-merge/readme.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/callbag-merge/readme.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/callbag-merge/readme.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/callbag-merge/readme.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/callbag-merge/readme.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/callbag-merge/readme.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/callbag-merge/readme.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/callbag-merge/readme.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/callbag-merge/readme.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/callbag-merge/readme.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/callbag-merge/readme.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/callbag-merge/readme.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/callbag-merge/readme.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/callbag-merge/readme.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/callbag-merge/readme.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/callbag-merge/readme.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/callbag-merge/readme.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/callbag-merge/readme.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/callbag-merge/readme.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/callbag-merge/readme.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/callbag-merge/readme.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}}],"sources":{"node_modules/callbag-merge/readme.js":"/**\n * callbag-merge\n * -------------\n *\n * Callbag factory that merges data from multiple callbag sources. Works well\n * with listenable sources, and while it may work for some pullable sources,\n * it is only designed for listenable sources.\n *\n * `npm install callbag-merge`\n *\n * Example:\n *\n *     const interval = require('callbag-interval');\n *     const forEach = require('callbag-for-each');\n *     const merge = require('callbag-merge');\n *\n *     const source = merge(interval(100), interval(350));\n *\n *     forEach(x => console.log(x))(source); // 0\n *                                           // 1\n *                                           // 2\n *                                           // 0\n *                                           // 3\n *                                           // 4\n *                                           // 5\n *                                           // ...\n */\n\nfunction merge(...sources) {\n  return (start, sink) => {\n    if (start !== 0) return;\n    const n = sources.length;\n    const sourceTalkbacks = new Array(n);\n    let startCount = 0;\n    let endCount = 0;\n    const talkback = t => {\n      if (t === 0) return;\n      for (let i = 0; i < n; i++) sourceTalkbacks[i] && sourceTalkbacks[i](t);\n    };\n    for (let i = 0; i < n; i++) {\n      sources[i](0, (t, d) => {\n        if (t === 0) {\n          sourceTalkbacks[i] = d;\n          if (++startCount === 1) sink(0, talkback);\n        } else if (t === 2) {\n          sourceTalkbacks[i] = void 0;\n          if (++endCount === n) sink(2);\n        } else sink(t, d);\n      });\n    }\n  };\n}\n\nmodule.exports = merge;\n"},"lineCount":55}},"hash":"fb7f0ca59542fe4b6a5f5c8a520adece","cacheData":{"env":{}}}